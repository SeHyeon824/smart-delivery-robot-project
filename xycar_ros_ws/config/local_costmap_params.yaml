#================================================================#
#                 Local Costmap Configuration                    #
#================================================================#

# 로컬 코스트맵의 전역 좌표계 및 로봇 베이스 좌표계 설정
global_frame: odom
robot_base_frame: base_link

# 로컬 코스트맵의 업데이트 및 발행 주기 (Hz). 동적인 환경에 빠르게 반응하기 위해
# 이전 값(1.0/0.5)보다 높게 설정하는 것을 권장합니다.
update_frequency: 5.0
publish_frequency: 2.0

# 로컬 코스트맵은 정적 지도를 사용하지 않고, 센서 데이터로 동적으로 생성합니다.
static_map: false
# 로봇을 중심으로 지도가 함께 움직이도록 설정합니다.
rolling_window: true

# 로봇 주변을 탐색할 로컬 코스트맵의 크기 및 해상도 (미터 단위)
width: 3.0  # 로봇의 좌우 탐색 범위
height: 3.0 # 로봇의 앞뒤 탐색 범위
resolution: 0.05 # 지도의 정밀도 (0.05 = 5cm). global_costmap과 맞춰주는 것이 좋습니다.

# 사용할 코스트맵 레이어 플러그인 목록. 순서가 중요할 수 있습니다.
# (StaticLayer는 local_costmap에서 보통 사용하지 않습니다.)
plugins:
  - {name: obstacle_layer, type: "costmap_2d::VoxelLayer"} # 3D 장애물 감지를 위해 VoxelLayer 사용 권장
  - {name: inflation_layer, type: "costmap_2d::InflationLayer"}

#=================== Layer-Specific Parameters ====================#

# Obstacle Layer: 센서 데이터를 사용하여 실제 장애물을 표기하는 레이어
obstacle_layer:
  enabled: true
  # 장애물 감지에 사용할 센서 목록
  observation_sources: laser_scan_sensor

  laser_scan_sensor:
    # ⚠️ 중요: 센서의 실제 TF 프레임 이름으로 설정해야 합니다. 'base_link'가 아닌 'laser_frame'이 올바릅니다.
    sensor_frame: laser_frame
    data_type: LaserScan
    topic: /scan
    marking: true # 이 센서로 장애물을 그림
    clearing: true # 이 센서로 빈 공간을 그림
    obstacle_range: 3.5 # 이 거리 내의 장애물만 유효
    raytrace_range: 4.0 # 이 거리까지 빈 공간을 그림

# Inflation Layer: 장애물 주변에 안전거리를 설정하여 로봇이 부딪히지 않도록 하는 레이어
inflation_layer:
  enabled: true
  # ⚠️ 중요: 로봇의 실제 크기(footprint)와 주행 속도를 고려하여 신중하게 설정해야 합니다.
  # 로봇이 좁은 길을 통과하지 못한다면 이 값을 줄여야 합니다.
  inflation_radius: 0.5 # 장애물로부터 이 거리(m)만큼 안전 영역(비용)을 부풀림
  cost_scaling_factor: 3.0 # 팽창 비용의 감쇠율. 높을수록 장애물에 더 강하게 패널티 부여
